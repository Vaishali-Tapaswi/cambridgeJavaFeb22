Lab 5- Static
	class Simple {
		int count = 0;
		String name;

		public Simple(String name) {
			count++;
			this.name = name;
		}
	}

	public class Lab5 {
		public static void main(String[] args) {
			Simple s1 = new Simple("first");
			System.out.println(s1.name);
			Simple s2 = new Simple("second");
			System.out.println(s2.name);
			Simple s3 = new Simple("third");
			System.out.println(s3.name);
			System.out.println("Current Value of Count = " + s1.count);
		}
	}
	Run -> observe count will always be 1. 
	Modify -> int count = 0 to static int count = 0
	Run -> observe count will be 3 
		Also see warning for s1.count and replace it with Simple.count


Lab 4 -  Write 
         class BusinessLogic{
                    public void m1() {
                            System.out.println("BusinessLogic m1 method...");
                   }
         }
         class MyCode extends BusinessLogic{
                  @override
		public void m1() {
	                  System.out.println("MyCode overrides m1 method");
	         }        
               }
               
         class Lab4{
	public static void main(String[] args) {
		BusinessLogic logic1 = new BusinessLogic();
		logic1.m1();
		MyCode mycode =new MyCode();
		mycode.m1();
	         }
         }
         Will run -> andd m1 from corrosponding classes
         
         Stop m1 method from getting overridden -> change m1 method as  final public void m1() 
         -Observe error in MyCode -> can not override final method m1
                  -> remove m1 method from MyCode
                  -> run - in both the cases m1 from BusinessLogic will be invoked....
         Modify class BusinessLogic as Final
         -Observe error for deriving from that class
         
Lab3 - 
         abstract class Emp{
                private int empno;
                private String ename;
                private double salary;
                public abstract void calcSalary();
                        + public get/set + toString
           }
        Write main method 
                to create instance of Emp -> Emp e1 = new Emp -> Observe Error
          
        Write class ContractEmp
                class ContractEmp extends Emp{}
                        -> observe error -> for overriding calcSalary Method
       Write Lab3 -> main
        Create instance of ContractEmp and invoked calcSalary method

Lab 2 - class Student -> studentName, marks
        class School
           collection of students 
     1. Define class Student
         private String studentName;
         private int marks;
         -------------> Generate getters/setters and toString
     
     2. Define class School
          List<Student> list = new ArrayList<Student>();
          write a for loop to add 4 students 
            -> just show list
  Lab1 -          
      import java.util.ArrayList;
      import java.util.List;
      import java.util.Scanner;

      public class Lab1 {

        public static void main(String[] args) {
          Scanner scanner = new Scanner(System.in);
          List<String> list = new ArrayList<String>();
          for (int i = 0;i<5;i++) {
            System.out.println("Enter a String : ");
            list.add( scanner.next());
          }
          System.out.println(list);
          System.out.println("Enter the String which you want to remove");
          list.remove(scanner.next());

          System.out.println(list);
        }

      }
